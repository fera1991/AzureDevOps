name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install
      working-directory: ./backend

    - name: Run tests
      run: npm test
      working-directory: ./backend

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push
      if: github.ref == 'refs/heads/main'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AZURE_VM_PRIVATE_KEY }}

    - name: Verify SSH connection and deploy
      run: |
        if ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} "exit"; then
          echo "SSH connection established"
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
            # Ingresar al directorio home del usuario
            cd /home/${{ secrets.AZURE_VM_USERNAME }}

            # Clonar el repositorio si no existe
            if [ ! -d ".git" ]; then
              git clone https://github.com/fera1991/AzureDevOps.git .
              cd AzureDevOps
            else
              git pull origin main
              cd AzureDevOps
            fi
            # Ejecutar docker-compose para desplegar la aplicaciÃ³n
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
          EOF
        else
          echo "SSH connection failed"
          exit 1
        fi